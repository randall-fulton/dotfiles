#+PROPERTY: header-args  :tangle configuration.el
#+PROPERTY: header-args+ :eval never
#+PROPERTY: header-args+ :exports code

** Globals

#+begin_src elisp
  (defvar rf/source-code-font
    (concat "Fira Code "
	    (cond ((eq system-type 'darwin) "16")
		  ((eq system-type 'gnu/linux) "12")
		  ((eq system-type 'windows-nt) "12"))))
#+end_src

** Package management

Straight is used to manage package installation, with the
=use-package= integration.

#+begin_src elisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (setq straight-vc-git-default-protocol 'https)
  (setq straight-vc-git-force-protocol nil)

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src

** Org Setup

#+begin_src elisp
  (defun rf/configure-org ()
    ;; vars
    (setq org-pretty-entities t
          org-hide-leading-star t
          org-hide-emphasis-markers t
          org-log-done t
          org-startup-indented t)

    ;; keybinds
    (define-key org-mode-map (kbd "C-c a") #'org-agenda)

    ;; babel languages
    (org-babel-do-load-languages 'org-babel-load-languages '((shell . t)))

    ;; style
    (variable-pitch-mode)
    (visual-line-mode)
    (let* ((variable-tuple
            (cond ((x-list-fonts "ETBembo")      '(:font "ETBembo"))
                  ((x-family-fonts "Sans Serif") '(:family "Sans Serif"))
                  (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
           (base-font-color     (face-foreground 'default nil 'default))
           (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
      (custom-theme-set-faces
       'user
       `(variable-pitch ((t (,@variable-tuple :height 180 :weight thin))))
       `(fixed-pitch ((t (:font ,rf/source-code-font :height 180))))
       `(org-level-8 ((t (,@headline ,@variable-tuple))))
       `(org-level-7 ((t (,@headline ,@variable-tuple))))
       `(org-level-6 ((t (,@headline ,@variable-tuple))))
       `(org-level-5 ((t (,@headline ,@variable-tuple))))
       `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
       `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
       `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
       `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
       `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))
       '(org-code ((t (:inherit (shadow fixed-pitch)))))
       '(org-block ((t (:inherit fixed-pitch))))
       '(org-document-info ((t (:foreground "dark orange"))))
       '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
       '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
       '(org-link ((t (:foreground "royal blue" :underline t))))
       '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
       '(org-property-value ((t (:inherit fixed-pitch))) t)
       '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
       '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
       '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
       '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))))

  (add-hook #'org-mode-hook #'rf/configure-org)
  (setq org-agenda-files '("~/org/work.org"))
#+end_src

Pandoc-powered exporter. Helpful for Markdown, as the default exporter doesn't add language to source blocks in exported document.
#+begin_src elisp
  (use-package ox-pandoc)
#+end_src

** Emacs defaults

Always start maximized.

#+begin_src elisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Remove GUI decorations, to present a plain window.

#+begin_src elisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

Set the default working directory and show it in dired on startup.

#+begin_src elisp
  (setq default-directory
		(cond ((equal system-type 'windows-nt) "G:\\Developer")
			  (t "~/dev")))
  
  (setq inhibit-startup-screen t)
  (setq initial-buffer-choice default-directory)
#+end_src

Put all backup files in a central location. Prevents triggering tools like =gotestsum= every time an Emacs backup happens.

#+begin_src elisp
  (setq backup-directory-alist `(("." . "~/.saves"))
        auto-save-default nil)
#+end_src

Global code formatting rules.

Customize code style through font, theme, ligatures, etc.

#+begin_src elisp
  (set-frame-font rf/source-code-font nil t)

  (use-package modus-themes
    :init
    (setq modus-themes-bold-constructs t
          modus-themes-org-blocks 'gray-background)
    :config (load-theme 'modus-operandi))

  (use-package ligature
    :load-path "path-to-ligature-repo"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures '(prog-mode org-mode)
                            '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                              ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                              "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                              "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                              "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                              "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                              "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                              "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                              ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                              "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                              "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                              "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                              "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

To use icons in =doom-modeline= we have to have =all-the-icons=. After installing the package, run =M-x all-the-icons-install-fonts= to get required icon fonts.
#+begin_src elisp
  (use-package all-the-icons)
#+end_src

Mode line
#+begin_src elisp
  (use-package doom-modeline
    :init
    (require 'all-the-icons)
    (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 50))
#+end_src

Helpful editor customizations to make code navigation easier.

#+begin_src elisp
  (setq display-line-numbers-type 'relative)
  (add-hook #'prog-mode-hook #'display-line-numbers-mode)
#+end_src

*** Path

Ensure Emacs shares =$PATH= with a normal shell. Without this, some executables won't be
available (e.g. =rust-analyzer=).

#+begin_src elisp
  (setq-default explicit-shell-file-name
                (cond ((eq system-type 'darwin) "/usr/local/bin/zsh")
                      ((eq system-type 'gnu/linux) "/usr/bin/zsh")
                      ((eq system-type 'windows-nt) "bash")))

  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

*** Keybinds

Change =other-window= to allow for easy forward and backward
navigation. Much more fluid movement, reminiscent of Vim.

#+begin_src elisp
  (global-unset-key (kbd "C-x o"))
  (global-set-key (kbd "C-,")
				  (lambda () (interactive) (other-window -1)))
  (global-set-key (kbd "C-.")
				  (lambda () (interactive) (other-window 1)))
#+end_src

Open this file for editing.

#+begin_src elisp
  (defun rf/config-edit ()
	"Open configuration file"
	(interactive)
	(find-file (expand-file-name "configuration.org" user-emacs-directory)))
  (global-set-key (kbd "C-c c") '("config-edit" . rf/config-edit))
#+end_src

** Utilities

#+begin_src elisp
  (use-package magit
	:ensure t)
  (use-package which-key
	:ensure t
	:config
	(which-key-mode))
#+end_src

** Terminal

Eshell is nice, but it doesn't play well with tools that expect a "full-featured" terminal. Using =ansi-term= doesn't work too well in those cases either. (See =bacon test=, for example.)

#+begin_src elisp
  (use-package vterm)
#+end_src

** IDE

Advanced functionality to turn Emacs into a full-blown IDE.

*** Completion

Ivy. It's better than Ido, but who knows about helm...

In this context, "completion" refers to interactions with the
minibuffer and eshell. LSP completion is not handled by ivy.

#+begin_src elisp
  (use-package ivy
	:ensure t
	:config
	(ivy-mode))
#+end_src

*** LSP

#+begin_src elisp
  (use-package company)
  
  (use-package lsp-ui
	:bind (("C-c o" . lsp-ui-imenu))
	:custom
	(lsp-ui-imenu-window-fix-width t)
	(lsp-ui-doc-enable t)
	(lsp-ui-doc-show-with-cursor t)
	(lsp-ui-doc-delay 1)
	(lsp-ui-doc-position 'top))

  (use-package lsp-mode
	:init
	(setq lsp-keymap-prefix "C-c l")
	:commands lsp
	:custom
	(lsp-rust-analyzer-cargo-watch-command "clippy"))
#+end_src

*** Projectile

**** TODO usage of =projectile-project-search-path= slows startup

Package =rg= is required for projectile-ripgrep.

#+begin_src elisp
  (use-package rg)
  (use-package projectile
      :bind ("C-c p" . projectile-command-map)
      :init
      (setq projectile-project-search-path (list default-directory))
      (projectile-mode +1))
#+end_src

*** Syntax checks

**** TODO how do I plug in extra tools to flycheck
**** TODO better keybinds to quickly jump between errors

#+begin_src elisp
  (use-package flycheck
	:bind
	(("M-p" . flycheck-previous-error)
	 ("M-n" . flycheck-next-error)))
#+end_src

*** Snippets

Yasnippet isn't configured with any snippets by default, so we have to create them ourselves or use another package.

Luckily, there is a fairly comprehensive one. =M-x yas-describe-tables= provides a list of available snippets.

#+begin_src elisp
  (use-package yasnippet-snippets)
#+end_src

Yasnippet itself is enabled as a per-mode minor-mode, using hooks. It can also be setup as a global mode.

#+begin_src elisp
  (use-package yasnippet
    :bind (:map yas-minor-mode-map
                ("M-/" . yas-expand)
                ("TAB" . nil)))
  (require 'yasnippet)
  (yas-reload-all)
#+end_src

*** Treesitter (Disabled)

The following only works with Emacs 29+. Follow [[https://git.savannah.gnu.org/cgit/emacs.git/tree/admin/notes/tree-sitter/starter-guide?h=feature/tree-sitter][this guide]] to setup
tree-sitter.

This still has a huge drawback: it replaces language modes with
tree-sitter equivalents. This would sound great, except the
replacement modes are not yet full-featured. For example, =go-ts-mode=
has improper highlighting, indentation, and requires separate
configuration to =go-mode=.

#+begin_src elisp :tangle no
  (defun treesit-install-all-languages ()
	"Install all languages specified by `treesit-language-source-alist'."
	(interactive)
	(let ((languages (mapcar 'car treesit-language-source-alist)))
	  (dolist (lang languages)
		(treesit-install-language-grammar lang)
		(message "`%s' parser was installed." lang)
		(sit-for 0.75))))

  (defun treesit-initialize ()
	"Initialize tree-sitter."
	(interactive)
	(setq treesit-extra-load-path '("~/dev/tree-sitter-module/dist"))
	(setq treesit-language-source-alist
		  '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
			(c . ("https://github.com/tree-sitter/tree-sitter-c"))
			(cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
			(go . ("https://github.com/tree-sitter/tree-sitter-go"))
			(gomod . ("https://github.com/camdencheek/tree-sitter-go-mod"))
			(json . ("https://github.com/tree-sitter/tree-sitter-json"))
			(make . ("https://github.com/alemuller/tree-sitter-make"))
			(python . ("https://github.com/tree-sitter/tree-sitter-python"))
			(rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
			(toml . ("https://github.com/tree-sitter/tree-sitter-toml"))))
	(when (treesit-available-p)
	  (require 'treesit)
	  ;; (treesit-install-all-languages)
	  (when (treesit-ready-p 'go t)
		(add-to-list 'major-mode-remap-alist '(go-mode . go-ts-mode)))))

  (when (and (not (version< emacs-version "29"))
			 (treesit-available-p))
	(treesit-initialize)
	(use-package tester
	  :ensure t
	  :straight (tester
				 :type git
				 :host github
				 :repo "randall-fulton/tester.el")))
#+end_src

*** Languages

**** Docker

#+begin_src elisp
  (use-package dockerfile-mode)
#+end_src

**** Go

****** TODO use =gofumpt= on-save

****** TODO add snippet for =t.Run()=

****** TODO use =gotestsum= for auto-testing

#+begin_src elisp
    (use-package go-mode
      :bind (("C-c C-c C-c" . tester-run-current-test))
      :config
      (add-hook 'go-mode-hook #'lsp-deferred)
      (add-hook 'before-save-hook #'lsp-format-buffer)
      (add-hook 'before-save-hook #'lsp-organize-imports)
      (add-hook 'go-mode-hook #'yas-minor-mode))
    (use-package ob-go
      :straight (ob-go
                 :type git
                 :host github
                 :repo "pope/ob-go"))
#+end_src

To support files with build-tags in lsp-mode, use something like the following in dir-locals.
#+begin_src lisp-data :export none :tangle no
   ((go-mode . (lsp-gopls-build-flags . ["-tags=unit,integration"])))
#+end_src

**** Haskell

#+begin_src elisp
  (use-package haskell-mode
	:config
	(add-hook 'haskell-mode-hook #'lsp-deferred)
	(add-hook 'haskell-mode-hook #'flycheck-mode)
	:init
	(use-package lsp-haskell)
	(use-package hindent))
#+end_src

**** Lisp

#+begin_src elisp
  (use-package parinfer-rust-mode
    :hook (emacs-lisp-mode lisp-mode)
    :init
    (setq parinfer-rust-auto-download t))
  (use-package slime
    :init
    (setq inferior-lisp-program "sbcl --dynamic-space-size 4096")
    (setq browse-url-handlers
	  '(("hyperspec" . eww-browse-url)
	    ("." . browse-url-default-browser))))
#+end_src

Parinfer doesn't work well with other minor modes that manage whitespace. If we don't disable =indent-tabs-mode=, really strange behavior happens when editing Lisp.
#+begin_src elisp
  (defun rf/disable-indent-tabs-for-lisp (mode-hooks)
    "Disable indent-tabs-mode for all MODE-HOOKS."
    (dolist (hook mode-hooks)
      (add-hook hook #'(lambda() (indent-tabs-mode -1)))))
  (rf/disable-indent-tabs-for-lisp '(emacs-lisp-mode-hook lisp-mode-hook))
#+end_src

**** Nix

#+begin_src elisp
  (use-package nix-mode)
#+end_src

**** Python

#+begin_src elisp
  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp))))

  (use-package python-black
    :after python
    :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src

**** Odin

#+begin_src elisp
  (use-package odin-mode
    :straight
    (odin-mode :type git :host github :repo "mattt-b/odin-mode")
    :config
    (setq-default lsp-auto-guess-root t)
    (defvar lsp-language-id-configuration '((odin-mode . "odin")))
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "g:/Developer/odin/ols/ols.exe")
		      :major-modes '(odin-mode)
		      :server-id 'ols
		      :multi-root t))
    (add-hook 'odin-mode-hook #'lsp-deferred))
#+end_src

**** Rust

#+begin_src elisp
  (use-package rustic
	:hook (lsp-deferred) ; lsp-rust-analyzer-inlay-hints-mode
	:init
	;; (setq lsp-rust-analyzer-server-display-inlay-hints t)
	:config
	(add-hook 'before-save-hook #'lsp-format-buffer)
	(add-hook 'before-save-hook #'lsp-organize-imports)
    (add-hook 'rust-mode-hook #'yas-minor-mode))
	;; (push 'rustic-clippy flycheck-checkers))
#+end_src

***** TODO use =bacon= for auto-testing

**** Yaml

#+begin_src elisp
  (use-package yaml-mode)
#+end_src
