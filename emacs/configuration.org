#+PROPERTY: header-args  :tangle configuration.el
#+PROPERTY: header-args+ :eval never
#+PROPERTY: header-args+ :exports code

** TODO configure Org to condense header levels

** Package management

Straight is used to manage package installation, with the
=use-package= integration.

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (setq straight-vc-git-default-protocol 'ssh)
  (setq straight-vc-git-force-protocol t)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src

** Emacs defaults

Always start maximized.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Remove GUI decorations, to present a plain window.

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

Set the default working directory and show it in dired on startup.

#+begin_src emacs-lisp
  (setq default-directory
		(cond ((equal system-type 'windows-nt) "G:\\Developer")
			  (t "~/dev")))
  
  (setq inhibit-startup-screen t)
  (setq initial-buffer-choice default-directory)
#+end_src

Global code formatting rules.

Note sure if this is doing anything. It was added when I was using
=go-ts-mode=, which has its own problems.

#+begin_src emacs-lisp
  (setq-default tab-width 4)
#+end_src

Customize code style through font, theme, ligatures, etc.

#+begin_src emacs-lisp
  (set-frame-font (cond ((eq system-type 'darwin) "FiraMono Nerd Font Mono 16")
						((eq system-type 'gnu/linux) "Iosevka 12")
						((eq system-type 'windows-nt) "Fira Code 12"))
				  nil t)

  (use-package gruvbox-theme
	:config
	(load-theme 'gruvbox))

  (use-package ligature
	:load-path "path-to-ligature-repo"
	:config
	;; Enable the "www" ligature in every possible major mode
	(ligature-set-ligatures 't '("www"))
	;; Enable traditional ligature support in eww-mode, if the
	;; `variable-pitch' face supports it
	(ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
	;; Enable all Cascadia Code ligatures in programming modes
	(ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
										 ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
										 "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
										 "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
										 "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
										 "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
										 "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
										 "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
										 ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
										 "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
										 "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
										 "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
										 "\\\\" "://"))
	;; Enables ligature checks globally in all buffers. You can also do it
	;; per mode with `ligature-mode'.
	(global-ligature-mode t))
#+end_src

Mode line

#+begin_src emacs-lisp :tangle no
  (use-package mood-line
	:config
	(mood-line-mode)
	;; Use pretty Fira Code-compatible glyphs
	:custom
	(mood-line-glyph-alist mood-line-glyphs-fira-code))
#+end_src

Helpful editor customizations to make code navigation easier.

#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
#+end_src

*** Path

Ensure Emacs shares =$PATH= with a normal shell. Without this, some executables won't be
available (e.g. =rust-analyzer=).

#+begin_src emacs-lisp
  (setq-default explicit-shell-file-name "/usr/bin/zsh")

  (use-package exec-path-from-shell
	:ensure t
	:config
	(when (memq window-system '(mac ns x))
	  (exec-path-from-shell-initialize)))
#+end_src

*** Keybinds

Change =other-window= to allow for easy forward and backward
navigation. Much more fluid movement, reminiscent of Vim.

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-x o"))
  (global-set-key (kbd "C-,")
				  (lambda () (interactive) (other-window -1)))
  (global-set-key (kbd "C-.")
				  (lambda () (interactive) (other-window 1)))
#+end_src

Open this file for editing.

#+begin_src emacs-lisp
  (defun rf/config-edit ()
	"Open configuration file"
	(interactive)
	(find-file (expand-file-name "configuration.org" user-emacs-directory)))
  (global-set-key (kbd "C-c c") '("config-edit" . rf/config-edit))
#+end_src

** Utilities

#+begin_src emacs-lisp
  (use-package magit
	:ensure t)
  (use-package which-key
	:ensure t
	:config
	(which-key-mode))
#+end_src

** IDE

Advanced functionality to turn Emacs into a full-blown IDE.

*** Completion

Ivy. It's better than Ido, but who knows about helm...

In this context, "completion" refers to interactions with the
minibuffer and eshell. LSP completion is not handled by ivy.

#+begin_src emacs-lisp
  (use-package ivy
	:ensure t
	:config
	(ivy-mode))
#+end_src

*** LSP

#+begin_src emacs-lisp
  (use-package company)
  
  (use-package lsp-ui
	:bind (("C-c o" . lsp-ui-imenu))
	:custom
	(lsp-ui-imenu-window-fix-width t)
	(lsp-ui-doc-enable t)
	(lsp-ui-doc-show-with-cursor t)
	(lsp-ui-doc-delay 1)
	(lsp-ui-doc-position 'top))

  (use-package lsp-mode
	:init
	(setq lsp-keymap-prefix "C-c l")
	:commands lsp
	:custom
	(lsp-rust-analyzer-cargo-watch-command "clippy"))
  ;; (use-package yasnippet)
#+end_src

*** Projectile

**** TODO usage of =projectile-project-search-path= slows startup

#+begin_src emacs-lisp
  (use-package projectile
	:bind ("C-c p" . projectile-command-map)
	:init
	(setq projectile-project-search-path (list default-directory))
	(projectile-mode +1))
#+end_src

*** Syntax checks

**** TODO how do I plug in extra tools to flycheck
**** TODO better keybinds to quickly jump between errors

#+begin_src emacs-lisp
  (use-package flycheck
	:bind
	(("M-p" . flycheck-previous-error)
	 ("M-n" . flycheck-next-error)))
#+end_src

*** Treesitter (Disabled)

The following only works with Emacs 29+. Follow [[https://git.savannah.gnu.org/cgit/emacs.git/tree/admin/notes/tree-sitter/starter-guide?h=feature/tree-sitter][this guide]] to setup
tree-sitter.

This still has a huge drawback: it replaces language modes with
tree-sitter equivalents. This would sound great, except the
replacement modes are not yet full-featured. For example, =go-ts-mode=
has improper highlighting, indentation, and requires separate
configuration to =go-mode=.

#+begin_src emacs-lisp :tangle no
  (defun treesit-install-all-languages ()
	"Install all languages specified by `treesit-language-source-alist'."
	(interactive)
	(let ((languages (mapcar 'car treesit-language-source-alist)))
	  (dolist (lang languages)
		(treesit-install-language-grammar lang)
		(message "`%s' parser was installed." lang)
		(sit-for 0.75))))

  (defun treesit-initialize ()
	"Initialize tree-sitter."
	(interactive)
	(setq treesit-extra-load-path '("~/dev/tree-sitter-module/dist"))
	(setq treesit-language-source-alist
		  '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
			(c . ("https://github.com/tree-sitter/tree-sitter-c"))
			(cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
			(go . ("https://github.com/tree-sitter/tree-sitter-go"))
			(gomod . ("https://github.com/camdencheek/tree-sitter-go-mod"))
			(json . ("https://github.com/tree-sitter/tree-sitter-json"))
			(make . ("https://github.com/alemuller/tree-sitter-make"))
			(python . ("https://github.com/tree-sitter/tree-sitter-python"))
			(rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
			(toml . ("https://github.com/tree-sitter/tree-sitter-toml"))))
	(when (treesit-available-p)
	  (require 'treesit)
	  ;; (treesit-install-all-languages)
	  (when (treesit-ready-p 'go t)
		(add-to-list 'major-mode-remap-alist '(go-mode . go-ts-mode)))))

  (when (and (not (version< emacs-version "29"))
			 (treesit-available-p))
	(treesit-initialize)
	(use-package tester
	  :ensure t
	  :straight (tester
				 :type git
				 :host github
				 :repo "randall-fulton/tester.el")))
#+end_src

*** Languages

**** Docker

#+begin_src emacs-lisp
  (use-package dockerfile-mode)
#+end_src

**** Go

****** TODO use =gofumpt= on-save

#+begin_src emacs-lisp
  (use-package go-mode
	  :hook (yas-minor-mode)
	  :bind (("C-c C-c C-c" . tester-run-current-test))
	  :config
	  (add-hook 'go-mode-hook #'lsp-deferred)
	  (add-hook 'before-save-hook #'lsp-format-buffer)
	  (add-hook 'before-save-hook #'lsp-organize-imports))
#+end_src

**** Haskell

#+begin_src emacs-lisp
  (use-package haskell-mode
	:config
	(add-hook 'haskell-mode-hook #'lsp-deferred)
	(add-hook 'haskell-mode-hook #'flycheck-mode)
	:init
	(use-package lsp-haskell)
	(use-package hindent))
#+end_src

**** Lisp

#+begin_src emacs-lisp
  (use-package parinfer-rust-mode
	:hook (emacs-lisp-mode lisp-mode)
	:init
	(setq parinfer-rust-auto-download t))
  (use-package slime
	:init
	(setq inferior-lisp-program "sbcl --dynamic-space-size 4096")
	(setq browse-url-handlers
		  '(("hyperspec" . eww-browse-url)
			("." . browse-url-default-browser))))
#+end_src

**** Python

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp))))

  (use-package python-black
    :after python
    :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src

**** Odin

#+begin_src emacs-lisp
  (use-package odin-mode
    :straight (odin-mode :type git :host github :repo "randall-fulton/odin-mode"))
#+end_src

**** Rust

#+begin_src emacs-lisp
  (use-package rustic
	:hook (lsp-deferred yas-minor-mode) ; lsp-rust-analyzer-inlay-hints-mode
	:init
	;; (setq lsp-rust-analyzer-server-display-inlay-hints t)
	:config
	(add-hook 'before-save-hook #'lsp-format-buffer)
	(add-hook 'before-save-hook #'lsp-organize-imports)
	(push 'rustic-clippy flycheck-checkers))
#+end_src

**** Yaml

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src
